-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | For testing interface with PA
--   
--   For testing interface with PA
@package simulator-for-PA-interface
@version 0.1.0.2

module PA.Data
data MessageATS2PA
OperationalATSSession :: MessageATS2PA
NextThreeDeparture :: StationCode -> [TrainInfo] -> MessageATS2PA
DeparturePlatform :: StationCode -> TrainInfo -> MessageATS2PA
ArrivalPlatform :: StationCode -> ArrivalTrigger -> MessageATS2PA
ClearDisplay :: StationCode -> PlatformNumber -> MessageATS2PA
data MessagePA2ATS
ConnectionRequest :: MessagePA2ATS
data ArrivalTrigger
NonStopping :: ArrivalTrigger
NotInService :: ArrivalTrigger
Terminated :: ArrivalTrigger
NextEstimatedTrain :: TrainInfo -> Word8 -> ArrivalTrigger
data TrainInfo
TrainInfo :: RollingStockProfile -> PlatformNumber -> Word8 -> Word8 -> Word8 -> StationCode -> TrainInfo
data RollingStockProfile
FourCar :: RollingStockProfile
SixCar :: RollingStockProfile
EightCar :: RollingStockProfile
data PlatformNumber
PL1 :: PlatformNumber
PL2 :: PlatformNumber
PL3 :: PlatformNumber
data StationCode
JPW :: StationCode
DBMR :: StationCode
DSHP :: StationCode
PALM :: StationCode
SABR :: StationCode
IGDA :: StationCode
SKVR :: StationCode
VTVR :: StationCode
MIRK :: StationCode
RKPM :: StationCode
IIT :: StationCode
HKS :: StationCode
PSPK :: StationCode
CDLI :: StationCode
GKEI :: StationCode
NUEE :: StationCode
KJMD :: StationCode
OKNS :: StationCode
IWNR :: StationCode
JANR :: StationCode
OVA :: StationCode
JLA :: StationCode
KIKJ :: StationCode
OKBS :: StationCode
BTGD :: StationCode
KIKD :: StationCode
JSTB :: StationCode
instance GHC.Show.Show PA.Data.MessageATS2PA
instance GHC.Show.Show PA.Data.ArrivalTrigger
instance GHC.Show.Show PA.Data.TrainInfo
instance GHC.Show.Show PA.Data.StationCode
instance GHC.Show.Show PA.Data.PlatformNumber
instance GHC.Show.Show PA.Data.RollingStockProfile
instance GHC.Show.Show PA.Data.MessagePA2ATS
instance Data.Serialize.Serialize PA.Data.MessageATS2PA
instance Data.Serialize.Serialize PA.Data.MessagePA2ATS
instance Data.Serialize.Serialize PA.Data.ArrivalTrigger
instance Data.Serialize.Serialize PA.Data.TrainInfo
instance Data.Bits.Coded.Coded PA.Data.PlatformNumber
instance Data.Bits.Coded.Coded PA.Data.RollingStockProfile
instance Data.Serialize.Serialize PA.Data.StationCode

module PA.Scenario
type Scenario = [(MessageATS2PA, Int)]

-- | This scenario is for Departure Platform Message.
scenario1 :: StationCode -> StationCode -> StationCode -> StationCode -> PlatformNumber -> RollingStockProfile -> Word8 -> Scenario

-- | This scenario is for revenue train at KJMD.
scenario2 :: StationCode -> StationCode -> StationCode -> PlatformNumber -> RollingStockProfile -> Word8 -> Scenario

-- | This scenario is for non-stopping train at KJMD.
scenario3 :: StationCode -> StationCode -> PlatformNumber -> RollingStockProfile -> Word8 -> Scenario

-- | This scenario is for non-revenue train at KJMD.
scenario4 :: StationCode -> StationCode -> StationCode -> PlatformNumber -> RollingStockProfile -> Word8 -> Scenario

-- | This scenario is for terminated train at BTGD.
scenario5 :: StationCode -> StationCode -> PlatformNumber -> RollingStockProfile -> Word8 -> Scenario


-- | Main module for interface simulation of ATS and PA
module PA

-- | Start simulator for ATS server with scenario. Currently following
--   scenarios are available <a>scenario1</a>, <a>scenario2</a>,
--   <a>scenario3</a>, <a>scenario4</a> and <a>scenario5</a>.
serverATS :: ServiceName -> Scenario -> IO ()

-- | Start simulator for PA server.
serverPA :: HostName -> ServiceName -> IO ()

-- | Get a handle for TCP/IP communicatoin for manually sending the message
--   with <a>sendMsgPA2ATS</a> or <a>sendMsgATS2PA</a>.
getHandle :: HostName -> ServiceName -> IO Handle

-- | To close handle.
closeHandle :: Handle -> IO ()

-- | To manually send the PA to ATS message
sendMsgPA2ATS :: Handle -> MessagePA2ATS -> IO ()

-- | To manually send the ATS to PA message.
sendMsgATS2PA :: Handle -> MessageATS2PA -> IO ()

-- | To insert delay for the thread.
wait :: Int -> IO ()
